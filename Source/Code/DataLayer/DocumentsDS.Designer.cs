//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

using System;
namespace Lusitania.Simuladores.DataLayer {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DocumentsDS")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DocumentsDS : global::System.Data.DataSet {
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DocumentsDS() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DocumentsDS(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DocumentsDS cln = ((DocumentsDS)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DocumentsDS";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DocumentsDS.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DocumentsDS ds = new DocumentsDS();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
    }
}
namespace Lusitania.Simuladores.DataLayer.DocumentsDSTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QueriesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.IDbCommand[] _commandCollection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.IDbCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.IDbCommand[3];
            this._commandCollection[0] = new global::Oracle.DataAccess.Client.OracleCommand();
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).Connection = new global::Oracle.DataAccess.Client.OracleConnection(global::Lusitania.Simuladores.DataLayer.Properties.Settings.Default.ConnectionString);
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).CommandText = "LUS_PLSQL.WEB_SIM_DOCUMENTOS_PKG.INSERE_DOCUMENTO";
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).CommandType = global::System.Data.CommandType.StoredProcedure;
            global::Oracle.DataAccess.Client.OracleParameter param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_RAMO";
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Varchar2;
            param.Size = 32768;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_APOLICE";
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Varchar2;
            param.Size = 32768;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_TIPODOC";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Decimal;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_FICHEIRO";
            param.DbType = global::System.Data.DbType.Binary;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Blob;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[0])).Parameters.Add(param);
            this._commandCollection[1] = new global::Oracle.DataAccess.Client.OracleCommand();
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).Connection = new global::Oracle.DataAccess.Client.OracleConnection(global::Lusitania.Simuladores.DataLayer.Properties.Settings.Default.ConnectionString);
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).CommandText = "LUS_PLSQL.WEB_SIM_DOCUMENTOS_PKG.INSERE_DOCUMENTO";
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_IDSIMULACAO";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Decimal;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_TIPODOC";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Decimal;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_FICHEIRO";
            param.DbType = global::System.Data.DbType.Binary;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Blob;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[1])).Parameters.Add(param);
            this._commandCollection[2] = new global::Oracle.DataAccess.Client.OracleCommand();
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).Connection = new global::Oracle.DataAccess.Client.OracleConnection(global::Lusitania.Simuladores.DataLayer.Properties.Settings.Default.ConnectionString);
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).CommandText = "LUS_PLSQL.OUTPUT_DOCS_PKG.INSERE_OUTPUT_DOCUPLOAD";
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).CommandType = global::System.Data.CommandType.StoredProcedure;
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_GUID_DOC";
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Varchar2;
            param.Size = 32768;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_TIPODOC";
            param.DbType = global::System.Data.DbType.Decimal;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Decimal;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).Parameters.Add(param);
            param = new global::Oracle.DataAccess.Client.OracleParameter();
            param.ParameterName = "A_FICHEIRO";
            param.DbType = global::System.Data.DbType.Binary;
            param.OracleDbTypeEx = global::Oracle.DataAccess.Client.OracleDbType.Blob;
            param.IsNullable = true;
            param.SourceColumn = null;
            ((global::Oracle.DataAccess.Client.OracleCommand)(this._commandCollection[2])).Parameters.Add(param);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
         public virtual int INSERE_DOCUMENTO(string A_RAMO, string A_APOLICE, global::System.Nullable<decimal> A_TIPODOC, byte[] A_FICHEIRO)
        {
            global::Oracle.DataAccess.Client.OracleCommand command = ((global::Oracle.DataAccess.Client.OracleCommand)(this.CommandCollection[0]));
            if ((A_RAMO == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(A_RAMO));
            }
            if ((A_APOLICE == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(A_APOLICE));
            }
            if ((A_TIPODOC.HasValue == true)) {
                command.Parameters[2].Value = ((decimal)(A_TIPODOC.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((A_FICHEIRO == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((byte[])(A_FICHEIRO));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int INSERE_DOCUMENTO_2(global::System.Nullable<decimal> A_IDSIMULACAO, global::System.Nullable<decimal> A_TIPODOC, byte[] A_FICHEIRO) {
            global::Oracle.DataAccess.Client.OracleCommand command = ((global::Oracle.DataAccess.Client.OracleCommand)(this.CommandCollection[1]));
            if ((A_IDSIMULACAO.HasValue == true)) {
                command.Parameters[0].Value = ((decimal)(A_IDSIMULACAO.Value));
            }
            else {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((A_TIPODOC.HasValue == true)) {
                command.Parameters[1].Value = ((decimal)(A_TIPODOC.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((A_FICHEIRO == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((byte[])(A_FICHEIRO));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int INSERE_OUTPUT_DOCUPLOAD(string A_GUID_DOC, global::System.Nullable<decimal> A_TIPODOC, byte[] A_FICHEIRO) {
            global::Oracle.DataAccess.Client.OracleCommand command = ((global::Oracle.DataAccess.Client.OracleCommand)(this.CommandCollection[2]));
            if ((A_GUID_DOC == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(A_GUID_DOC));
            }
            if ((A_TIPODOC.HasValue == true)) {
                command.Parameters[1].Value = ((decimal)(A_TIPODOC.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((A_FICHEIRO == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((byte[])(A_FICHEIRO));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591
